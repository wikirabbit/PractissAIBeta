.shepherd-button {
  background: #3288e6;
  border: 0;
  border-radius: 3px;
  color: hsla(0, 0%, 100%, 0.75);
  cursor: pointer;
  margin-right: 0.5rem;
  padding: 0.5rem 1.5rem;
  transition: all 0.5s ease;
}

.shepherd-button:not(:disabled):hover {
  background: #196fcc;
  color: hsla(0, 0%, 100%, 0.75);
}

.shepherd-button.shepherd-button-secondary {
  background: #f1f2f3;
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-button.shepherd-button-secondary:not(:disabled):hover {
  background: #d6d9db;
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-button:disabled {
  cursor: not-allowed;
}

.shepherd-footer {
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
  display: flex;
  justify-content: flex-end;
  padding: 0 0.75rem 0.75rem;
}

.shepherd-footer .shepherd-button:last-child {
  margin-right: 0;
}

.shepherd-cancel-icon {
  background: transparent;
  border: none;
  color: hsla(0, 0%, 50%, 0.75);
  cursor: pointer;
  font-size: 2em;
  font-weight: 400;
  margin: 0;
  padding: 0;
  transition: color 0.5s ease;
}

.shepherd-cancel-icon:hover {
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-has-title .shepherd-content .shepherd-cancel-icon {
  color: hsla(0, 0%, 50%, 0.75);
}

.shepherd-has-title .shepherd-content .shepherd-cancel-icon:hover {
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-title {
  color: rgba(0, 0, 0, 0.75);
  display: flex;
  flex: 1 0 auto;
  font-size: 1rem;
  font-weight: 400;
  margin: 0;
  padding: 0;
}

.shepherd-header {
  align-items: center;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  display: flex;
  justify-content: flex-end;
  line-height: 2em;
  padding: 0.75rem 0.75rem 0;
}

.shepherd-has-title .shepherd-content .shepherd-header {
  background: #e6e6e6;
  padding: 1em;
}

.shepherd-text {
  color: rgba(0, 0, 0, 0.75);
  font-size: 1rem;
  line-height: 1.3em;
  padding: 0.75em;
}

.shepherd-text p {
  margin-top: 0;
}

.shepherd-text p:last-child {
  margin-bottom: 0;
}

.shepherd-content {
  border-radius: 5px;
  outline: none;
  padding: 0;
}

.shepherd-element {
  background: #fff;
  border-radius: 5px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
  max-width: 400px;
  opacity: 0;
  outline: none;
  transition: opacity 0.3s, visibility 0.3s;
  visibility: hidden;
  width: 100%;
  z-index: 9999;
}

.shepherd-enabled.shepherd-element {
  opacity: 1;
  visibility: visible;
}

.shepherd-element[data-popper-reference-hidden]:not(.shepherd-centered) {
  opacity: 0;
  pointer-events: none;
  visibility: hidden;
}

.shepherd-element, .shepherd-element *, .shepherd-element :after, .shepherd-element :before {
  box-sizing: border-box;
}

.shepherd-arrow, .shepherd-arrow:before {
  height: 16px;
  position: absolute;
  width: 16px;
  z-index: -1;
}

.shepherd-arrow:before {
  background: #fff;
  content: "";
  transform: rotate(45deg);
}

.shepherd-element[data-popper-placement^=top] > .shepherd-arrow {
  bottom: -8px;
}

.shepherd-element[data-popper-placement^=bottom] > .shepherd-arrow {
  top: -8px;
}

.shepherd-element[data-popper-placement^=left] > .shepherd-arrow {
  right: -8px;
}

.shepherd-element[data-popper-placement^=right] > .shepherd-arrow {
  left: -8px;
}

.shepherd-element.shepherd-centered > .shepherd-arrow {
  opacity: 0;
}

.shepherd-element.shepherd-has-title[data-popper-placement^=bottom] > .shepherd-arrow:before {
  background-color: #e6e6e6;
}

.shepherd-target-click-disabled.shepherd-enabled.shepherd-target, .shepherd-target-click-disabled.shepherd-enabled.shepherd-target * {
  pointer-events: none;
}

.shepherd-modal-overlay-container {
  height: 0;
  left: 0;
  opacity: 0;
  overflow: hidden;
  pointer-events: none;
  position: fixed;
  top: 0;
  transition: all 0.3s ease-out, height 0ms 0.3s, opacity 0.3s 0ms;
  width: 100vw;
  z-index: 9997;
}

.shepherd-modal-overlay-container.shepherd-modal-is-visible {
  height: 100vh;
  opacity: 0.5;
  transform: translateZ(0);
  transition: all 0.3s ease-out, height 0s 0s, opacity 0.3s 0s;
}

.shepherd-modal-overlay-container.shepherd-modal-is-visible path {
  pointer-events: all;
}

.shepherd-element .shepherd-arrow:before {
  border-right: 1px solid;
  border-bottom: 1px solid;
}
.shepherd-element .shepherd-text {
  padding: 0.75rem 1rem;
}
.shepherd-element .shepherd-content {
  min-width: 15rem;
}
.shepherd-element .shepherd-content .shepherd-header {
  padding: 0.5rem 1rem;
}
.shepherd-element .shepherd-content .shepherd-header .shepherd-cancel-icon {
  position: relative;
  height: 1.375rem;
  width: 1.375rem;
  font-size: 1.5rem;
  background-color: #fff;
  border-radius: 0.25rem;
}
.shepherd-element .shepherd-content .shepherd-header .shepherd-cancel-icon:focus {
  outline: 0;
}
.shepherd-element .shepherd-content .shepherd-header .shepherd-cancel-icon span {
  position: absolute;
  top: -6px;
  left: 0;
  right: 0;
}
.shepherd-element .shepherd-content .shepherd-footer {
  padding: 0 1rem 0.75rem;
}
.shepherd-element .shepherd-content .shepherd-footer .shepherd-button {
  padding: 0.438rem 1.125rem;
}
.shepherd-element[data-popper-placement=bottom] {
  margin-top: 0.8rem !important;
}
.shepherd-element[data-popper-placement=top] {
  margin-bottom: 0.8rem !important;
}
.shepherd-element[data-popper-placement=left] {
  margin-right: 0.8rem !important;
}
.shepherd-element[data-popper-placement=right] {
  margin-left: 0.8rem !important;
}

.light-style .shepherd-element {
  box-shadow: 0 0.25rem 1rem rgba(147, 158, 170, 0.45);
}
.light-style .shepherd-element .shepherd-arrow:before {
  border-color: rgba(38, 60, 85, 0.3);
}
.light-style .shepherd-cancel-icon span {
  color: #a8b1bb;
}

.dark-style .shepherd-element {
  box-shadow: 0 0.25rem 1rem rgba(0, 0, 0, 0.25);
  background: #717784;
}
.dark-style .shepherd-element .shepherd-text {
  color: #fff;
}
.dark-style .shepherd-element .shepherd-arrow:before {
  background: #717784;
  border-color: rgba(113, 119, 132, 0.06);
}
.dark-style .shepherd-cancel-icon span {
  color: #8295ba;
}

[dir=rtl] .shepherd-element .btn-next {
  margin-right: 0.5rem;
}

@media (max-width: 575.98px) {
  .shepherd-element {
    max-width: 300px !important;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9zaGVwaGVyZC5qcy9kaXN0L2Nzcy9zaGVwaGVyZC5jc3MiLCJ2ZW5kb3IvbGlicy9zaGVwaGVyZC9zaGVwaGVyZC5jc3MiLCJ2ZW5kb3IvbGlicy9zaGVwaGVyZC9zaGVwaGVyZC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsbUJBQUE7RUFBQSxTQUFBO0VBQUEsa0JBQUE7RUFBQSw4QkFBQTtFQUFBLGVBQUE7RUFBQSxvQkFBQTtFQUFBLHNCQUFBO0VBQUEseUJBQUE7QUNTQTs7QURUQTtFQUFBLG1CQUFBO0VBQUEsOEJBQUE7QUNjQTs7QURkQTtFQUFBLG1CQUFBO0VBQUEsMEJBQUE7QUNtQkE7O0FEbkJBO0VBQUEsbUJBQUE7RUFBQSwwQkFBQTtBQ3dCQTs7QUR4QkE7RUFBQSxtQkFBQTtBQzRCQTs7QUEzQkE7RUREaUIsOEJBQUE7RUFBQSwrQkFBQTtFQUFBLGFBQUE7RUFBQSx5QkFBQTtFQUFBLDBCQUFBO0FDb0NqQjs7QURwQ2lCO0VBQUEsZUFBQTtBQ3dDakI7O0FBdENBO0VERm9DLHVCQUFBO0VBQUEsWUFBQTtFQUFBLDZCQUFBO0VBQUEsZUFBQTtFQUFBLGNBQUE7RUFBQSxnQkFBQTtFQUFBLFNBQUE7RUFBQSxVQUFBO0VBQUEsMkJBQUE7QUNvRHBDOztBRHBEb0M7RUFBQSwwQkFBQTtBQ3dEcEM7O0FEeERvQztFQUFBLDZCQUFBO0FDNERwQzs7QUQ1RG9DO0VBQUEsMEJBQUE7QUNnRXBDOztBQTdEQTtFREg2QywwQkFBQTtFQUFBLGFBQUE7RUFBQSxjQUFBO0VBQUEsZUFBQTtFQUFBLGdCQUFBO0VBQUEsU0FBQTtFQUFBLFVBQUE7QUMwRTdDOztBQXRFQTtFREorRCxtQkFBQTtFQUFBLDJCQUFBO0VBQUEsNEJBQUE7RUFBQSxhQUFBO0VBQUEseUJBQUE7RUFBQSxnQkFBQTtFQUFBLDBCQUFBO0FDb0YvRDs7QURwRitEO0VBQUEsbUJBQUE7RUFBQSxZQUFBO0FDeUYvRDs7QUFwRkE7RURMeUYsMEJBQUE7RUFBQSxlQUFBO0VBQUEsa0JBQUE7RUFBQSxlQUFBO0FDZ0d6Rjs7QURoR3lGO0VBQUEsYUFBQTtBQ29HekY7O0FEcEd5RjtFQUFBLGdCQUFBO0FDd0d6Rjs7QUFsR0E7RUROd0csa0JBQUE7RUFBQSxhQUFBO0VBQUEsVUFBQTtBQzhHeEc7O0FBdkdBO0VEUDJILGdCQUFBO0VBQUEsa0JBQUE7RUFBQSx3Q0FBQTtFQUFBLGdCQUFBO0VBQUEsVUFBQTtFQUFBLGFBQUE7RUFBQSx5Q0FBQTtFQUFBLGtCQUFBO0VBQUEsV0FBQTtFQUFBLGFBQUE7QUMySDNIOztBRDNIMkg7RUFBQSxVQUFBO0VBQUEsbUJBQUE7QUNnSTNIOztBRGhJMkg7RUFBQSxVQUFBO0VBQUEsb0JBQUE7RUFBQSxrQkFBQTtBQ3NJM0g7O0FEdEkySDtFQUFBLHNCQUFBO0FDMEkzSDs7QUQxSTJIO0VBQUEsWUFBQTtFQUFBLGtCQUFBO0VBQUEsV0FBQTtFQUFBLFdBQUE7QUNpSjNIOztBRGpKMkg7RUFBQSxnQkFBQTtFQUFBLFdBQUE7RUFBQSx3QkFBQTtBQ3VKM0g7O0FEdkoySDtFQUFBLFlBQUE7QUMySjNIOztBRDNKMkg7RUFBQSxTQUFBO0FDK0ozSDs7QUQvSjJIO0VBQUEsV0FBQTtBQ21LM0g7O0FEbksySDtFQUFBLFVBQUE7QUN1SzNIOztBRHZLMkg7RUFBQSxVQUFBO0FDMkszSDs7QUQzSzJIO0VBQUEseUJBQUE7QUMrSzNIOztBRC9LMkg7RUFBQSxvQkFBQTtBQ21MM0g7O0FBM0tBO0VEUmdKLFNBQUE7RUFBQSxPQUFBO0VBQUEsVUFBQTtFQUFBLGdCQUFBO0VBQUEsb0JBQUE7RUFBQSxlQUFBO0VBQUEsTUFBQTtFQUFBLGdFQUFBO0VBQUEsWUFBQTtFQUFBLGFBQUE7QUNnTWhKOztBRGhNZ0o7RUFBQSxhQUFBO0VBQUEsWUFBQTtFQUFBLHdCQUFBO0VBQUEsNERBQUE7QUN1TWhKOztBRHZNZ0o7RUFBQSxtQkFBQTtBQzJNaEo7O0FEM00yUDtFQUEyQyx1QkFBQTtFQUFtQix3QkFBQTtBQ2dOelQ7QUE1TEU7RURwQjZVLHFCQUFBO0FDbU4vVTtBRG5Oa2E7RUN3QjlaLGdCRHhCNk47QUNzTmpPO0FBN0xJO0VEekJvYixvQkFBQTtBQ3lOeGI7QUE3TE07RUFDRSxrQkFBQTtFRDVCUixnQkFBQTtFQUFpQixlQUFBO0VBQThCLGlCQUFBO0VBQStCLHNCQUQwRjtFQUM3RSxzQkFPSztBQ3lOaEc7QURoT29IO0VDbUMxRyxVQUFBO0FBZ01WO0FEbk80STtFQUE2QyxrQkFBQTtFQ3VDL0ssU0FBQTtFQUNBLE9BQUE7RUR2Q1YsUUFBQTtBQ3dPQTtBRHhPaUc7RUFBYyx1QkFBQTtBQzJPL0c7QUQzTytIO0VBQVMsMEJBQUE7QUM4T3hJO0FEOU93TTtFQ3NEcE0sNkJBQUE7QUEyTEo7QURqUDhOO0VBQTRELGdDQUFBO0FDb1AxUjtBQXpMRTtFRDNEaVQsK0JBQUE7QUN1UG5UO0FBekxFO0VBQ0UsOEJBQUE7QUEyTEo7O0FEelBnRztFQUFTLG9EQUs0SjtBQ3dQclE7QUF0TE07RUFDRSxtQ0QzRThSO0FDbVF0UztBRC9QK0Q7RUFBNEIsY0U2R25GO0FEcUpSOztBQTdLSTtFQUNFLDhDRHRGNk87RUFDblAsbUJDb0RPO0FBa05QO0FEdFFlO0VBQXNCLFdBTDRMO0FDOFFqTztBRHpRc0U7RUMyRjlELG1CQXZDRDtFQXdDQyx1Q0FBQTtBQWlMUjtBQTdLTTtFRGhHNEcsY0MrRnJHO0FBaUxiOztBRDlRQTtFQUFrQixvQkFBQTtBQ2tSbEI7O0FEclJBO0VBR3FLO0lBQWtCLDJCQUFBO0VDdVJyTDtBQUNGO0FBQ0EscXc2RUFBcXc2RSIsImZpbGUiOiJ2ZW5kb3IvbGlicy9zaGVwaGVyZC9zaGVwaGVyZC5kaXN0LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaGVwaGVyZC1idXR0b257YmFja2dyb3VuZDojMzI4OGU2O2JvcmRlcjowO2JvcmRlci1yYWRpdXM6M3B4O2NvbG9yOmhzbGEoMCwwJSwxMDAlLC43NSk7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLXJpZ2h0Oi41cmVtO3BhZGRpbmc6LjVyZW0gMS41cmVtO3RyYW5zaXRpb246YWxsIC41cyBlYXNlfS5zaGVwaGVyZC1idXR0b246bm90KDpkaXNhYmxlZCk6aG92ZXJ7YmFja2dyb3VuZDojMTk2ZmNjO2NvbG9yOmhzbGEoMCwwJSwxMDAlLC43NSl9LnNoZXBoZXJkLWJ1dHRvbi5zaGVwaGVyZC1idXR0b24tc2Vjb25kYXJ5e2JhY2tncm91bmQ6I2YxZjJmMztjb2xvcjpyZ2JhKDAsMCwwLC43NSl9LnNoZXBoZXJkLWJ1dHRvbi5zaGVwaGVyZC1idXR0b24tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOmhvdmVye2JhY2tncm91bmQ6I2Q2ZDlkYjtjb2xvcjpyZ2JhKDAsMCwwLC43NSl9LnNoZXBoZXJkLWJ1dHRvbjpkaXNhYmxlZHtjdXJzb3I6bm90LWFsbG93ZWR9XG4uc2hlcGhlcmQtZm9vdGVye2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NXB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjVweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO3BhZGRpbmc6MCAuNzVyZW0gLjc1cmVtfS5zaGVwaGVyZC1mb290ZXIgLnNoZXBoZXJkLWJ1dHRvbjpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfVxuLnNoZXBoZXJkLWNhbmNlbC1pY29ue2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyOm5vbmU7Y29sb3I6aHNsYSgwLDAlLDUwJSwuNzUpO2N1cnNvcjpwb2ludGVyO2ZvbnQtc2l6ZToyZW07Zm9udC13ZWlnaHQ6NDAwO21hcmdpbjowO3BhZGRpbmc6MDt0cmFuc2l0aW9uOmNvbG9yIC41cyBlYXNlfS5zaGVwaGVyZC1jYW5jZWwtaWNvbjpob3Zlcntjb2xvcjpyZ2JhKDAsMCwwLC43NSl9LnNoZXBoZXJkLWhhcy10aXRsZSAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtY2FuY2VsLWljb257Y29sb3I6aHNsYSgwLDAlLDUwJSwuNzUpfS5zaGVwaGVyZC1oYXMtdGl0bGUgLnNoZXBoZXJkLWNvbnRlbnQgLnNoZXBoZXJkLWNhbmNlbC1pY29uOmhvdmVye2NvbG9yOnJnYmEoMCwwLDAsLjc1KX1cbi5zaGVwaGVyZC10aXRsZXtjb2xvcjpyZ2JhKDAsMCwwLC43NSk7ZGlzcGxheTpmbGV4O2ZsZXg6MSAwIGF1dG87Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NDAwO21hcmdpbjowO3BhZGRpbmc6MH1cbi5zaGVwaGVyZC1oZWFkZXJ7YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NXB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjVweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2xpbmUtaGVpZ2h0OjJlbTtwYWRkaW5nOi43NXJlbSAuNzVyZW0gMH0uc2hlcGhlcmQtaGFzLXRpdGxlIC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC1oZWFkZXJ7YmFja2dyb3VuZDojZTZlNmU2O3BhZGRpbmc6MWVtfVxuLnNoZXBoZXJkLXRleHR7Y29sb3I6cmdiYSgwLDAsMCwuNzUpO2ZvbnQtc2l6ZToxcmVtO2xpbmUtaGVpZ2h0OjEuM2VtO3BhZGRpbmc6Ljc1ZW19LnNoZXBoZXJkLXRleHQgcHttYXJnaW4tdG9wOjB9LnNoZXBoZXJkLXRleHQgcDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH1cbi5zaGVwaGVyZC1jb250ZW50e2JvcmRlci1yYWRpdXM6NXB4O291dGxpbmU6bm9uZTtwYWRkaW5nOjB9XG4uc2hlcGhlcmQtZWxlbWVudHtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czo1cHg7Ym94LXNoYWRvdzowIDFweCA0cHggcmdiYSgwLDAsMCwuMik7bWF4LXdpZHRoOjQwMHB4O29wYWNpdHk6MDtvdXRsaW5lOm5vbmU7dHJhbnNpdGlvbjpvcGFjaXR5IC4zcyx2aXNpYmlsaXR5IC4zczt2aXNpYmlsaXR5OmhpZGRlbjt3aWR0aDoxMDAlO3otaW5kZXg6OTk5OX0uc2hlcGhlcmQtZW5hYmxlZC5zaGVwaGVyZC1lbGVtZW50e29wYWNpdHk6MTt2aXNpYmlsaXR5OnZpc2libGV9LnNoZXBoZXJkLWVsZW1lbnRbZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbl06bm90KC5zaGVwaGVyZC1jZW50ZXJlZCl7b3BhY2l0eTowO3BvaW50ZXItZXZlbnRzOm5vbmU7dmlzaWJpbGl0eTpoaWRkZW59LnNoZXBoZXJkLWVsZW1lbnQsLnNoZXBoZXJkLWVsZW1lbnQgKiwuc2hlcGhlcmQtZWxlbWVudCA6YWZ0ZXIsLnNoZXBoZXJkLWVsZW1lbnQgOmJlZm9yZXtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnNoZXBoZXJkLWFycm93LC5zaGVwaGVyZC1hcnJvdzpiZWZvcmV7aGVpZ2h0OjE2cHg7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTZweDt6LWluZGV4Oi0xfS5zaGVwaGVyZC1hcnJvdzpiZWZvcmV7YmFja2dyb3VuZDojZmZmO2NvbnRlbnQ6XCJcIjt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKX0uc2hlcGhlcmQtZWxlbWVudFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXRvcF0+LnNoZXBoZXJkLWFycm93e2JvdHRvbTotOHB4fS5zaGVwaGVyZC1lbGVtZW50W2RhdGEtcG9wcGVyLXBsYWNlbWVudF49Ym90dG9tXT4uc2hlcGhlcmQtYXJyb3d7dG9wOi04cHh9LnNoZXBoZXJkLWVsZW1lbnRbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1sZWZ0XT4uc2hlcGhlcmQtYXJyb3d7cmlnaHQ6LThweH0uc2hlcGhlcmQtZWxlbWVudFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXJpZ2h0XT4uc2hlcGhlcmQtYXJyb3d7bGVmdDotOHB4fS5zaGVwaGVyZC1lbGVtZW50LnNoZXBoZXJkLWNlbnRlcmVkPi5zaGVwaGVyZC1hcnJvd3tvcGFjaXR5OjB9LnNoZXBoZXJkLWVsZW1lbnQuc2hlcGhlcmQtaGFzLXRpdGxlW2RhdGEtcG9wcGVyLXBsYWNlbWVudF49Ym90dG9tXT4uc2hlcGhlcmQtYXJyb3c6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6I2U2ZTZlNn0uc2hlcGhlcmQtdGFyZ2V0LWNsaWNrLWRpc2FibGVkLnNoZXBoZXJkLWVuYWJsZWQuc2hlcGhlcmQtdGFyZ2V0LC5zaGVwaGVyZC10YXJnZXQtY2xpY2stZGlzYWJsZWQuc2hlcGhlcmQtZW5hYmxlZC5zaGVwaGVyZC10YXJnZXQgKntwb2ludGVyLWV2ZW50czpub25lfVxuLnNoZXBoZXJkLW1vZGFsLW92ZXJsYXktY29udGFpbmVye2hlaWdodDowO2xlZnQ6MDtvcGFjaXR5OjA7b3ZlcmZsb3c6aGlkZGVuO3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246Zml4ZWQ7dG9wOjA7dHJhbnNpdGlvbjphbGwgLjNzIGVhc2Utb3V0LGhlaWdodCAwbXMgLjNzLG9wYWNpdHkgLjNzIDBtczt3aWR0aDoxMDB2dzt6LWluZGV4Ojk5OTd9LnNoZXBoZXJkLW1vZGFsLW92ZXJsYXktY29udGFpbmVyLnNoZXBoZXJkLW1vZGFsLWlzLXZpc2libGV7aGVpZ2h0OjEwMHZoO29wYWNpdHk6LjU7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNpdGlvbjphbGwgLjNzIGVhc2Utb3V0LGhlaWdodCAwcyAwcyxvcGFjaXR5IC4zcyAwc30uc2hlcGhlcmQtbW9kYWwtb3ZlcmxheS1jb250YWluZXIuc2hlcGhlcmQtbW9kYWwtaXMtdmlzaWJsZSBwYXRoe3BvaW50ZXItZXZlbnRzOmFsbH0iLCIuc2hlcGhlcmQtYnV0dG9ue2JhY2tncm91bmQ6IzMyODhlNjtib3JkZXI6MDtib3JkZXItcmFkaXVzOjNweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuNzUpO2N1cnNvcjpwb2ludGVyO21hcmdpbi1yaWdodDouNXJlbTtwYWRkaW5nOi41cmVtIDEuNXJlbTt0cmFuc2l0aW9uOmFsbCAuNXMgZWFzZX0uc2hlcGhlcmQtYnV0dG9uOm5vdCg6ZGlzYWJsZWQpOmhvdmVye2JhY2tncm91bmQ6IzE5NmZjYztjb2xvcjpoc2xhKDAsMCUsMTAwJSwuNzUpfS5zaGVwaGVyZC1idXR0b24uc2hlcGhlcmQtYnV0dG9uLXNlY29uZGFyeXtiYWNrZ3JvdW5kOiNmMWYyZjM7Y29sb3I6cmdiYSgwLDAsMCwuNzUpfS5zaGVwaGVyZC1idXR0b24uc2hlcGhlcmQtYnV0dG9uLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpob3ZlcntiYWNrZ3JvdW5kOiNkNmQ5ZGI7Y29sb3I6cmdiYSgwLDAsMCwuNzUpfS5zaGVwaGVyZC1idXR0b246ZGlzYWJsZWR7Y3Vyc29yOm5vdC1hbGxvd2VkfVxuLnNoZXBoZXJkLWZvb3Rlcntib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjVweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo1cHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LWVuZDtwYWRkaW5nOjAgLjc1cmVtIC43NXJlbX0uc2hlcGhlcmQtZm9vdGVyIC5zaGVwaGVyZC1idXR0b246bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH1cbi5zaGVwaGVyZC1jYW5jZWwtaWNvbntiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2NvbG9yOmhzbGEoMCwwJSw1MCUsLjc1KTtjdXJzb3I6cG9pbnRlcjtmb250LXNpemU6MmVtO2ZvbnQtd2VpZ2h0OjQwMDttYXJnaW46MDtwYWRkaW5nOjA7dHJhbnNpdGlvbjpjb2xvciAuNXMgZWFzZX0uc2hlcGhlcmQtY2FuY2VsLWljb246aG92ZXJ7Y29sb3I6cmdiYSgwLDAsMCwuNzUpfS5zaGVwaGVyZC1oYXMtdGl0bGUgLnNoZXBoZXJkLWNvbnRlbnQgLnNoZXBoZXJkLWNhbmNlbC1pY29ue2NvbG9yOmhzbGEoMCwwJSw1MCUsLjc1KX0uc2hlcGhlcmQtaGFzLXRpdGxlIC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC1jYW5jZWwtaWNvbjpob3Zlcntjb2xvcjpyZ2JhKDAsMCwwLC43NSl9XG4uc2hlcGhlcmQtdGl0bGV7Y29sb3I6cmdiYSgwLDAsMCwuNzUpO2Rpc3BsYXk6ZmxleDtmbGV4OjEgMCBhdXRvO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjQwMDttYXJnaW46MDtwYWRkaW5nOjB9XG4uc2hlcGhlcmQtaGVhZGVye2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjVweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo1cHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LWVuZDtsaW5lLWhlaWdodDoyZW07cGFkZGluZzouNzVyZW0gLjc1cmVtIDB9LnNoZXBoZXJkLWhhcy10aXRsZSAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtaGVhZGVye2JhY2tncm91bmQ6I2U2ZTZlNjtwYWRkaW5nOjFlbX1cbi5zaGVwaGVyZC10ZXh0e2NvbG9yOnJnYmEoMCwwLDAsLjc1KTtmb250LXNpemU6MXJlbTtsaW5lLWhlaWdodDoxLjNlbTtwYWRkaW5nOi43NWVtfS5zaGVwaGVyZC10ZXh0IHB7bWFyZ2luLXRvcDowfS5zaGVwaGVyZC10ZXh0IHA6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9XG4uc2hlcGhlcmQtY29udGVudHtib3JkZXItcmFkaXVzOjVweDtvdXRsaW5lOm5vbmU7cGFkZGluZzowfVxuLnNoZXBoZXJkLWVsZW1lbnR7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6NXB4O2JveC1zaGFkb3c6MCAxcHggNHB4IHJnYmEoMCwwLDAsLjIpO21heC13aWR0aDo0MDBweDtvcGFjaXR5OjA7b3V0bGluZTpub25lO3RyYW5zaXRpb246b3BhY2l0eSAuM3MsdmlzaWJpbGl0eSAuM3M7dmlzaWJpbGl0eTpoaWRkZW47d2lkdGg6MTAwJTt6LWluZGV4Ojk5OTl9LnNoZXBoZXJkLWVuYWJsZWQuc2hlcGhlcmQtZWxlbWVudHtvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlfS5zaGVwaGVyZC1lbGVtZW50W2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW5dOm5vdCguc2hlcGhlcmQtY2VudGVyZWQpe29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lO3Zpc2liaWxpdHk6aGlkZGVufS5zaGVwaGVyZC1lbGVtZW50LC5zaGVwaGVyZC1lbGVtZW50ICosLnNoZXBoZXJkLWVsZW1lbnQgOmFmdGVyLC5zaGVwaGVyZC1lbGVtZW50IDpiZWZvcmV7Ym94LXNpemluZzpib3JkZXItYm94fS5zaGVwaGVyZC1hcnJvdywuc2hlcGhlcmQtYXJyb3c6YmVmb3Jle2hlaWdodDoxNnB4O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjE2cHg7ei1pbmRleDotMX0uc2hlcGhlcmQtYXJyb3c6YmVmb3Jle2JhY2tncm91bmQ6I2ZmZjtjb250ZW50OlwiXCI7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LnNoZXBoZXJkLWVsZW1lbnRbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj10b3BdPi5zaGVwaGVyZC1hcnJvd3tib3R0b206LThweH0uc2hlcGhlcmQtZWxlbWVudFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePWJvdHRvbV0+LnNoZXBoZXJkLWFycm93e3RvcDotOHB4fS5zaGVwaGVyZC1lbGVtZW50W2RhdGEtcG9wcGVyLXBsYWNlbWVudF49bGVmdF0+LnNoZXBoZXJkLWFycm93e3JpZ2h0Oi04cHh9LnNoZXBoZXJkLWVsZW1lbnRbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1yaWdodF0+LnNoZXBoZXJkLWFycm93e2xlZnQ6LThweH0uc2hlcGhlcmQtZWxlbWVudC5zaGVwaGVyZC1jZW50ZXJlZD4uc2hlcGhlcmQtYXJyb3d7b3BhY2l0eTowfS5zaGVwaGVyZC1lbGVtZW50LnNoZXBoZXJkLWhhcy10aXRsZVtkYXRhLXBvcHBlci1wbGFjZW1lbnRePWJvdHRvbV0+LnNoZXBoZXJkLWFycm93OmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOiNlNmU2ZTZ9LnNoZXBoZXJkLXRhcmdldC1jbGljay1kaXNhYmxlZC5zaGVwaGVyZC1lbmFibGVkLnNoZXBoZXJkLXRhcmdldCwuc2hlcGhlcmQtdGFyZ2V0LWNsaWNrLWRpc2FibGVkLnNoZXBoZXJkLWVuYWJsZWQuc2hlcGhlcmQtdGFyZ2V0ICp7cG9pbnRlci1ldmVudHM6bm9uZX1cbi5zaGVwaGVyZC1tb2RhbC1vdmVybGF5LWNvbnRhaW5lcntoZWlnaHQ6MDtsZWZ0OjA7b3BhY2l0eTowO292ZXJmbG93OmhpZGRlbjtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOmZpeGVkO3RvcDowO3RyYW5zaXRpb246YWxsIC4zcyBlYXNlLW91dCxoZWlnaHQgMG1zIC4zcyxvcGFjaXR5IC4zcyAwbXM7d2lkdGg6MTAwdnc7ei1pbmRleDo5OTk3fS5zaGVwaGVyZC1tb2RhbC1vdmVybGF5LWNvbnRhaW5lci5zaGVwaGVyZC1tb2RhbC1pcy12aXNpYmxle2hlaWdodDoxMDB2aDtvcGFjaXR5Oi41O3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zaXRpb246YWxsIC4zcyBlYXNlLW91dCxoZWlnaHQgMHMgMHMsb3BhY2l0eSAuM3MgMHN9LnNoZXBoZXJkLW1vZGFsLW92ZXJsYXktY29udGFpbmVyLnNoZXBoZXJkLW1vZGFsLWlzLXZpc2libGUgcGF0aHtwb2ludGVyLWV2ZW50czphbGx9IiwiQHVzZSAnLi4vLi4vc2Nzcy9fYm9vdHN0cmFwLWV4dGVuZGVkL2luY2x1ZGUnIGFzIGxpZ2h0O1xuQHVzZSAnLi4vLi4vc2Nzcy9fYm9vdHN0cmFwLWV4dGVuZGVkL2luY2x1ZGUtZGFyaycgYXMgZGFyaztcbkBjaGFyc2V0IFwiVVRGLThcIjtcbkBpbXBvcnQgJy4uLy4uL3Njc3MvX2N1c3RvbS12YXJpYWJsZXMvbGlicyc7XG5AaW1wb3J0ICcuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2hlcGhlcmQuanMvZGlzdC9jc3Mvc2hlcGhlcmQnO1xuQGltcG9ydCAnLi9taXhpbnMnO1xuXG4kc2hlcGhlcmQtaGVhZGVyLWNvbnRlbnQtcGFkZGluZy14OiAxcmVtICFkZWZhdWx0O1xuJHNoZXBoZXJkLWhlYWRlci1jb250ZW50LXBhZGRpbmcteTogMC41cmVtICFkZWZhdWx0O1xuJHNoZXBoZXJkLXBhZGRpbmcteDogMXJlbSAhZGVmYXVsdDtcbiRzaGVwaGVyZC1wYWRkaW5nLXk6IDAuNzVyZW0gIWRlZmF1bHQ7XG4kc2hlcGhlcmQtYnRuLXBhZGRpbmcteDogMS4xMjVyZW0gIWRlZmF1bHQ7XG4kc2hlcGhlcmQtYnRuLXBhZGRpbmcteTogMC40MzhyZW0gIWRlZmF1bHQ7XG4kc2hlcGhlcmQtY29udGFpbmVyLXdpZHRoOiAxNXJlbSAhZGVmYXVsdDtcblxuLnNoZXBoZXJkLWVsZW1lbnQge1xuICAuc2hlcGhlcmQtYXJyb3c6YmVmb3JlIHtcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gIH1cbiAgLnNoZXBoZXJkLXRleHQge1xuICAgIHBhZGRpbmc6ICRzaGVwaGVyZC1wYWRkaW5nLXkgJHNoZXBoZXJkLXBhZGRpbmcteDtcbiAgfVxuICAuc2hlcGhlcmQtY29udGVudCB7XG4gICAgbWluLXdpZHRoOiAkc2hlcGhlcmQtY29udGFpbmVyLXdpZHRoO1xuICAgIC5zaGVwaGVyZC1oZWFkZXIge1xuICAgICAgcGFkZGluZzogJHNoZXBoZXJkLWhlYWRlci1jb250ZW50LXBhZGRpbmcteSAkc2hlcGhlcmQtaGVhZGVyLWNvbnRlbnQtcGFkZGluZy14O1xuXG4gICAgICAuc2hlcGhlcmQtY2FuY2VsLWljb24ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGhlaWdodDogMS4zNzVyZW07XG4gICAgICAgIHdpZHRoOiAxLjM3NXJlbTtcbiAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogbGlnaHQuJGJvcmRlci1yYWRpdXM7XG4gICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgIH1cbiAgICAgICAgc3BhbiB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogLTZweDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnNoZXBoZXJkLWZvb3RlciB7XG4gICAgICBwYWRkaW5nOiAwICRzaGVwaGVyZC1wYWRkaW5nLXggJHNoZXBoZXJkLXBhZGRpbmcteTtcbiAgICAgIC5zaGVwaGVyZC1idXR0b24ge1xuICAgICAgICBwYWRkaW5nOiAkc2hlcGhlcmQtYnRuLXBhZGRpbmcteSAkc2hlcGhlcmQtYnRuLXBhZGRpbmcteDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gQXNrIGJlZm9yZSBzdWJtaXRcbiAgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQ9J2JvdHRvbSddIHtcbiAgICBtYXJnaW4tdG9wOiAwLjhyZW0gIWltcG9ydGFudDtcbiAgfVxuICAmW2RhdGEtcG9wcGVyLXBsYWNlbWVudD0ndG9wJ10ge1xuICAgIG1hcmdpbi1ib3R0b206IDAuOHJlbSAhaW1wb3J0YW50O1xuICB9XG4gICZbZGF0YS1wb3BwZXItcGxhY2VtZW50PSdsZWZ0J10ge1xuICAgIG1hcmdpbi1yaWdodDogMC44cmVtICFpbXBvcnRhbnQ7XG4gIH1cbiAgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQ9J3JpZ2h0J10ge1xuICAgIG1hcmdpbi1sZWZ0OiAwLjhyZW0gIWltcG9ydGFudDtcbiAgfVxufVxuXG4vLyBMaWdodCBzdHlsZVxuQGlmICRlbmFibGUtbGlnaHQtc3R5bGUge1xuICAubGlnaHQtc3R5bGUge1xuICAgIC5zaGVwaGVyZC1lbGVtZW50IHtcbiAgICAgIGJveC1zaGFkb3c6IGxpZ2h0LiRib3gtc2hhZG93O1xuICAgICAgLnNoZXBoZXJkLWFycm93OmJlZm9yZSB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogbGlnaHQuJGdyYXktMzAwO1xuICAgICAgfVxuICAgIH1cbiAgICAuc2hlcGhlcmQtY2FuY2VsLWljb24ge1xuICAgICAgc3BhbiB7XG4gICAgICAgIGNvbG9yOiBsaWdodC4kdGV4dC1tdXRlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gRGFyayBTdHlsZVxuQGlmICRlbmFibGUtZGFyay1zdHlsZSB7XG4gIC5kYXJrLXN0eWxlIHtcbiAgICAuc2hlcGhlcmQtZWxlbWVudCB7XG4gICAgICBib3gtc2hhZG93OiBkYXJrLiRib3gtc2hhZG93O1xuICAgICAgYmFja2dyb3VuZDogZGFyay4kZGFyaztcbiAgICAgIC5zaGVwaGVyZC10ZXh0IHtcbiAgICAgICAgY29sb3I6IGRhcmsuJHdoaXRlO1xuICAgICAgfVxuICAgICAgLnNoZXBoZXJkLWFycm93OmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQ6IGRhcmsuJGRhcms7XG4gICAgICAgIGJvcmRlci1jb2xvcjogcmdiYShkYXJrLiRkYXJrLCAwLjA2KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLnNoZXBoZXJkLWNhbmNlbC1pY29uIHtcbiAgICAgIHNwYW4ge1xuICAgICAgICBjb2xvcjogZGFyay4kdGV4dC1tdXRlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gUlRMXG5AaWYgJGVuYWJsZS1ydGwtc3VwcG9ydCB7XG4gIFtkaXI9J3J0bCddIHtcbiAgICAuc2hlcGhlcmQtZWxlbWVudCB7XG4gICAgICAuYnRuLW5leHQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQGluY2x1ZGUgbGlnaHQubWVkaWEtYnJlYWtwb2ludC1kb3duKHNtKSB7XG4gIC5zaGVwaGVyZC1lbGVtZW50IHtcbiAgICBtYXgtd2lkdGg6IDMwMHB4ICFpbXBvcnRhbnQ7XG4gIH1cbn1cbiJdfQ== */
